Given an integer array. The task is to find the maximum of the minimum of every window size in the array.
Note: Window size varies from 1 to the size of the Array.

Example 1:

Input:
N = 7
arr[] = {10,20,30,50,10,70,30}
Output: 70 30 20 10 10 10 10 
Explanation: 
1.First element in output
indicates maximum of minimums of all
windows of size 1.
2.Minimums of windows of size 1 are {10},
 {20}, {30}, {50},{10}, {70} and {30}. 
 Maximum of these minimums is 70. 
3. Second element in output indicates
maximum of minimums of all windows of
size 2. 
4. Minimums of windows of size 2
are {10}, {20}, {30}, {10}, {10}, and
{30}.
5. Maximum of these minimums is 30 
Third element in output indicates
maximum of minimums of all windows of
size 3. 
6. Minimums of windows of size 3
are {10}, {20}, {10}, {10} and {10}.
7.Maximum of these minimums is 20. 
Similarly other elements of output are
computed.

def maxOfMinInWindows(arr):
    n = len(arr)
    left = [0] * n
    right = [0] * n
    stack = []

    for i in range(n):
        while stack and arr[i] <= arr[stack[-1]]:
            stack.pop()
        if stack:
            left[i] = stack[-1] + 1
        else:
            left[i] = 0
        stack.append(i)

    stack = []

    for i in range(n - 1, -1, -1):
        while stack and arr[i] <= arr[stack[-1]]:
            stack.pop()
        if stack:
            right[i] = stack[-1] - 1
        else:
            right[i] = n - 1
        stack.append(i)

    result = [0] * (n + 1)
    for i in range(n):
        window_size = right[i] - left[i] + 1
        result[window_size] = max(result[window_size], arr[i])

    for i in range(n - 1, 0, -1):
        result[i] = max(result[i], result[i + 1])

    return result[1:]

# Example usage:
arr = [10, 20, 30, 50, 10, 70, 30]
result = maxOfMinInWindows(arr)
print(result)  # Output: [70, 30, 20, 10, 10, 10, 10]
